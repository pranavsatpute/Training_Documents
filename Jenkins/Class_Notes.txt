		
###############
13th Mar. 2024 	
###############				
			
		DevOps - Build Orchestration Tool : Jenkins
			
			- Jenkins is a open-source build orchestration tool
			- Used to create end-to-end DevOps CI/CD Pipeline
			- Automate Build and Deployments 
			- Jenkins is based on Master Slave Architecture
			- Jenkins Pipeline scripts are written using groovy scripting language 
			
		Jenkins Architecture :
			- Master Slave Architecture
			
		   Ubuntu Machine :	Virtual Machine
			
			AWS Cloud Platform :
				VM Ubuntu 
					Jenkins_Master (VM)		--> It is used to create Jenkins CICD Pipeline Projects/Jobs and Schdule the jobs to run in slave Nodes.
						Jenkins_Slave Node (VM) 	--> It is used to run the actual Jenkins Pipeline Project.


			Tools to be installed :
				Jenkins_Master 	(VM)	--> 	git, jdk, jenkins
					Jenkins_Slave (VM)	-->     Build Tools: git, jdk, maven 
				
			Tools to be installed :
				Jenkins_Master 	(VM)	--> 	git, jdk, jenkins, jdk, maven, python  

				Java 
				python 
				.net 
				angular 
				nodejs 
				
			Tools to be installed :
				Jenkins_Master 	(VM)	--> 	git, jdk, jenkins		==> Create and schedule Jenkins CICD Pipeline Projects/Jobs
					
					Jenkins_Slave1 (VM)	-->     Java - git, jdk, maven 				
					Jenkins_Slave2 (VM)	-->     Python - git, python  								
					Jenkins_Slave3 (VM)	-->     .Net   - git, .Net Framework  
					Jenkins_Slave4 (VM)	-->     Angular  
					Jenkins_Slave5 (VM)	-->     NodeJS  					
				
			
			Skill : Handling Git and basic scripting knowledge 
			
			
				
				
				
	Environments ::
	
	Non-Prod Environments																	Prod Environment
	
		Dev Environment - Local Machine(Laptop)
		Testing Environment
			QA  Quality Assurance Testing 
				functional/integration/regression....
			UAT	User Acceptance Testing											-->				Production Environment(Servers)
				This testing will be done using LIVE production data.
				business users
						
					
			Source_Code 
			Build 
			Unit Testing 
			Deploy to QA 
			Perform QA Testing 
			Deploy to UAT 
			Perform UAT Testing 
			Deploy to Production Environment
					
		
		
		Roles and Responsibilities of DevOps Engineer :
		
		Jenkins can be used ::
		
			Developers' Perspective :
				- Developers are just the consumers of Jenkins CICD Projects				

			DevOps Perspective : - Administration of Jenkins Servers and Tools 
				
				
				- Installation of Jenkins
				- Jenkins System Management 
				- Management of Plugins 
				- Tools Management 
				- User Management
				- Credential Management 
				- Security Management 				
				- Configuration of jenkins Master Slave Nodes Architecture
				- Create CICD Pipeline Projects/Jobs 
				- Onboard the Applications to Jenkins 
				- Trobleshooting the Issues related to Jenkins/pipeline Projects 
				- Back-up and Recovery
				- Periodic upgrade of Jenkins and its plugins
				
			
				
			Installation of Jenkins :::
			
				Open-Source Tools :: Jenkins 
			
				Managed Services :
					AWS Code-Pipeline Service 
					Azure Pipeline Service 
					gitlab-ci
					
					
				Installation of Tools :

					Infra-Structure (VM)
					Install the pre-requisites - jdk 
					Install the Actual Tool    - jenkins - Runs in default port: 8080 as a webservice
					Post Installation Activities - Set the Jenkins service and start the service
				
				0. Create AWS - Free Tier Account 
							12 months access
							You can keep ur EC2 Instances running for 750 Hours / Month
								1 VM 	- 750 hrs/month
								10 VMs 	- 75 hrs/month
							Stop the instance as soon the task is over.
							Terminate the instance, when it is not required.
							Data Transfer rate - 1GB 						
					
					
				1. Launch AWS - Ubuntu Machine 
					- 2 VMs - (Jenkins_Master,Jenkins_Slave)
				2. Enable Port 8080 
				
				3. Install Jenkins along with its depedencies 
						https://www.jenkins.io/doc/book/installing/						
				4. Start Jenkins 
				

0. Launch Ubuntu v20.04 - AWS EC2 Instance 	
		Enable Port 8080

		Connect to EC2 Instance using :
			EC2 Instance Connect 
			SSH Agents : 
				MobaXterm  https://mobaxterm.mobatek.net/download.html
				Putty 
			Terminal 
			
1. Install the pre-requisites :::

# Install Jdk:

sudo -i 			
sudo apt update -y

sudo apt install openjdk-17-jre -y 						
java -version						

2. Install the Actual tool :::
 								
#Install Jenkins:

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update -y

sudo apt-get install jenkins -y		

jenkins --version 
			
Install GIT :

sudo apt install git -y
			
			/var/lib/jenkins			# Jenkins Default Directory.
			
			Access Jenkin using web browser:
				<public_ip_addr>:8080
				13.232.252.38:8080




###############
14th Mar. 2024 	
###############	

		Jenkins Plugins Management :::
		
			Plugins are the extension to Jenkins.
			
				Maven Build 
				
				Install/Uninstall/upgrade the plugins


		User and Security Management 



		Create CICD Pipeline Projects/Jobs :::
		
		Jenkins Projects/Jobs :::
		
			- Free-Style Projects
					Manually Configure any type of Projects 
					Completely Manual configuration
				
			
			- Pipeline Projects
					Written using groovy script 
					Used to Create CICD Pipeline Jobs
					
					
			Free-Style Jenkins Project 
				- Configure the Project 
				
				
			Handling Variables in Jenkins :::
					
				- Environment Variables 		# pre-defined keywords 

					echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"					
					
					"${JOB_NAME}" 

					
				- User Defined Variables 		# It is used to pass run time inputs to job


			Pipeline Projects :::		# Writted using groovy scripts & Reusable!
			
				- Scripted Pipeline 	# it uses the typical scripting Language. 
				
				
				- Declarative Pipeline 	# are the simplified version of Scripted Pipelines
				
				
				Pipelines are composed of many Stages:
				Stages are composed of many task enclosed in step:
				
				Pipeline 
				{
					Stages 
					{
						stage1
						{
							Steps
							{
								task1
								task2
								task3
							}
						}
						stage2
						{
							Steps
							{
								task1
								task2
								task3
							}
						}
					}
				}
			
		
pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Hello1') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Hello2') {
            steps {
                echo 'Hello World'
            }
        }
    }
}			


Create a Jenkins Pipeline to Build and Deploy the Application to QA Environment :::	



				
pipeline {
    agent any

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Hello World'
				git "clone the Repo"
            }
        }
        stage('Java Application Build') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy to UAT Environment') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Deploy to PROD Environment') {
            steps {
                echo 'Hello World'
            }
        }
    }
}					
		
Next :

			Master-Slave Configure

			How to Define the Pipeline stages for CICD
		

###############
18th Mar. 2024 	
###############		

		Master-Slave Configure

		How to Define the Pipeline stages for CICD		
	
			Tools to be installed :
				Jenkins_Master 	(VM)	--> 	git, jdk, jenkins		==> Create and schedule Jenkins CICD Pipeline Projects/Jobs
					
					Jenkins_Slave1 (VM)	-->     Java - git, jdk, maven 				
					Jenkins_Slave2 (VM)	-->     Python - git, python  								
					Jenkins_Slave3 (VM)	-->     .Net   - git, .Net Framework  
					Jenkins_Slave4 (VM)	-->     Angular  
					Jenkins_Slave5 (VM)	-->     NodeJS 	
					
		
		Launch :
		
			2 VMs 
			
				Jenkins_Master		--> git, jdk, jenkins 
					Jenkins_Slave 	--> jdk, git, maven 
			
				SSH Connection - port:22  
					Host_Name 
					User_Name 
					SSH_Key
					
				Types of Authentications :::
				
					Password based Authentication
					Token based Authentication
					Key based Authentication
						- private key and public key 
					Passwordless Authentication
					
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Configure Slave Node1 for Java Maven App. :

#Launch VM - 
#0. Launch Ubuntu v20.04 - AWS EC2 Instance 

sudo -i

apt update -y 

Install Java ::

sudo apt update -y 
sudo apt install openjdk-11-jre -y
java -version

Install GIT :

sudo apt install git -y

Install Maven - Build Tool :
https://maven.apache.org/install.html

sudo apt install maven -y 


Create User in Jenkins Slave Machine & Create SSH Keys 

	SSH Keys --> is composed of public and private keys 


#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 1024 -m PEM
ssh-keygen -t ecdsa -b 521


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add Slave Node to Jenkins Master using Jenkins Console.				
			
			

	Create Jenkins CICD Pipeline ::
	
	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Check-Out'
				echo 'Cloning Java Maven App Code'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Java Application Build') {
            steps {
                echo 'Perform Java Maven Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Hello World'
            }
        }
    }
}	


Deploy the artifacts to QA Environment :::



	Jenkins_Master 
		Jenkins_Slave   - *.war
		
	QA_Server	(VM) 
		Tomcat Web Application Server - 8080
		
######################Install TOMCAT Application Server on Ubuntu :::
#Launch VM - 
#0. Launch Ubuntu v20.04 - AWS EC2 Instance
add port 8080 in the inbound rule.

sudo -i

sudo apt update -y 


sudo apt install openjdk-11-jre -y 
java -version

#edit /etc/profile & add JAVA_HOME

#/usr/lib/jvm/java-11-openjdk-amd64/

vi /etc/profile

export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile

Install Tomcat ::  https://tomcat.apache.org/download-80.cgi

https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.99/bin/apache-tomcat-8.5.99.tar.gz


cd /opt
wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.99/bin/apache-tomcat-8.5.99.tar.gz

tar -xvzf /opt/apache-tomcat-8.5.99.tar.gz

mv apache-tomcat-8.5.99 tomcat

#Start Tomcat Server:
#Goto:

cd /opt/tomcat/bin
./startup.sh

###########################################

#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#make devopsadmin user as a owner to tomcat dir :

chown -R devopsadmin /opt/tomcat

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~		
		

What is Deployment ?

	Process of copying the artifacts to target environments.
	
	Source Machine 														Target Machine 
	
		Slave_Node1							=========>						Tomcat_Server
		
			Source Path:															Target Path:
			
				target/*.war 															/opt/tomcat/webapps/

Next :::

	Through Jenkins Master How to Achieve this?

		In jenkins Master, install Publish Over SSH Plugin  
	
	Complete the Jenkins CICD Pipeline 
	
	Build Trigger

	Email Notifications 
	
	Trigger Jenkins Pipeline from Eclipse using code commits 
	
###############
19th Mar. 2024 	
###############

	

		In jenkins Master, install Publish Over SSH Plugin  		

		Using this plugin the remote servers can be connect to Jenkins Master 
		
		goto manage jenkins --> Plugins --> Avaliable Plugins - search for 'Publish Over SSH'  --> install and restart JEnkins
		
		Goto Manage Jenkins --> System --> Publish Over SSH plugin for configuration.
		

CICD Pipeline :::
	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perfomr SCM Check-Out'
				echo 'Cloning Java Maven App Code'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Java Application Build') {
            steps {
                echo 'Perform Java Maven Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to QA_Tomcat_Server') {
            steps {
 				script {
 				    sshPublisher(publishers: [sshPublisherDesc(configName: 'SA-Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
 				}
                
            }
        }
    }
}	
		
		

	Build Triggers :::
	
		Automated Build 
		
		Scheduling the jobs 
		
		
		- Build Periodic:
				- It is used to run the job based on the cron tab schedule.
				Eg.: Trigger the Jobs for every 2 minute 
				
				Non-Prod Servers												Prod Servers 
				
				Dev server
				build server 
				qa, uat 															production servers
		
			start all the non-prod servers Week-days at 8AM 
			stop all the non-prod servers Week-days at 10PM 
		
		
		
		- poll SCM :::
		
				- It is used trigger the jenkins job if there is any commit happened in the source code repository and it gets triggered based on the schedule.
				
				- Both Build Periodic and Poll SCM uses the corntab for scheduling the jobs.
				
				Eg.: 
				
				H/2 * * * *
			
				POLL SCM will trigger the job for every 2 mins, only if there is any changes happened in the source repository.
				
				
				Test Cycle :::
				
					8AM   -  12PM	- 3PM 		--> 3 times QA Testing happens
				
				
				
				
		
		- GITHUB Webhook ::
		
				Is used to trigger the jenkins job whenever there is a change in github source code repository 
				
				Need to config github webhook url in source code repository
				
				http://13.201.136.71:8080/github-webhook/
				
				<Public_IP_Address>:8080/github-webhook/
				
				http://20.197.33.227:8080/github-webhook/
		
		


Next :::

		Email Notifications :::
		
			gmail account --> 
			MFA - Two - way Auth - using active Mobile Number
			App Password - 16Bytes of token 

###############
20th Mar. 2024 	
###############			


		EMail Notifications using Jenkins Pipeline 
		
		Handling App Build and CICD Pipelines through Eclipse
		
		Q&A :

			Using DevOps Approach 
			
				- Code the Application 
				- Update the source code in the Source Code Repository like Github 
				
			Using DevOps Process & Tools Automate :
			
				- Build  - It is a process of compiling the source code and create artifacts(Binaries - *.war / *.jar/ *.exec) 
				- Unit Testing 
				- Promote the changes to higher environments for further testing (QA/UAT)
				- Notify the testing teams to pick the changes for further testing		

		EMail Notifications using Jenkins Pipeline 
		
			Mail Plugin in Jenkins:
			
			Configuration of Email Notification Plugins 
			
			valid gmail.com 
			
			Two-Way Authentication using Mobile Number
			
			Login to gmail Account 
			goto Manage Account 
			Select security tab from left side 
			
			- Enable Two-way Authentication
			- On the same page, in the search bar - search for app password 
			- Enter the App_Name and click Create
			- You will get 16 bytes of app password: sdfgsdfgsdfgdfgdfgdfgdfgdf
			l@gmail.com
			
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perfomr SCM Check-Out'
				echo 'Cloning Java Maven App Code'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Java Application Build') {
            steps {
                echo 'Perform Java Maven Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to Tomcat_Server') {
            steps {
 				script {
 				    sshPublisher(publishers: [sshPublisherDesc(configName: 'SA-Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
 				}
                
            }
        }
    }
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			  
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perfomr SCM Check-Out'
				echo 'Cloning Java Maven App Code'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Java Application Build') {
            steps {
                echo 'Perform Java Maven Application Build'
                sh 'mvn clean package'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Build Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Deploy to Tomcat_Server') {
            steps {
 				script {
 				    sshPublisher(publishers: [sshPublisherDesc(configName: 'SA-Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])					
 				}
                
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Failed ', to: 'l@gmail.com'
                }
                success {
                  sh "echo 'Send mail on Successful'"
					mail bcc: 'l@gmail.com', body: "jenkins-${JOB_NAME}-${BUILD_NUMBER}", cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Successful ', to: 'l@gmail.com'
                }
              }
        }
    }
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


success
failure
unstable



	Handling App Build and CICD Pipelines through Eclipse :::
	
	
	
			Using DevOps Approach 
			
				- Code the Application using Eclipse IDE 
				- Update the source code in the Source Code Repository like Github 
				
			Using DevOps Process & Tools Automate :
			
				- Build  - It is a process of compiling the source code and create artifacts(Binaries - *.war / *.jar/ *.exec) 
				- Unit Testing 
				- Promote the changes to higher environments for further testing (QA/UAT)
				- Notify the testing teams to pick the changes for further testing		
	
pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perfomr SCM Check-Out'
				echo 'Cloning Java Maven App Code'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
             post {
                success {
                  sh "echo 'Send mail on success'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Successful ', to: 'l@gmail.com'
                }
              }
        }
        stage('Java Application Build') {
            steps {
                echo 'Perform Java Maven Application Build'
                sh 'mvn clean package'
            }
             post {
                success {
                  sh "echo 'Send mail on Success'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Build Successful ', to: 'l@gmail.com'
                }
              }
        }
        stage('Approve Deployment to QA'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
        stage('Deploy to Tomcat_Server') {
            steps {
 				script {
 				    sshPublisher(publishers: [sshPublisherDesc(configName: 'SA-Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])					
 				}
                
            }
             post {
                success {
                  sh "echo 'Send mail on Successful'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Successful ', to: 'l@gmail.com'
                }
              }
        }
    }
}
	
	
	
